type Query {
  totalPets(status: PetStatus): Int!
  allPets(category: PetType, status: PetStatus): [Pet!]!
  petById(id: ID!): Pet!
  totalCustomers: Int!
  allCustomers: [Customer!]!
}

type Mutation {
  createAccount(input: CreateAccountInput!) : Customer!
  login(username: String!, password: String!) : LoginPayload!
  checkout(id: ID!) : CheckoutPayload!
}

input CreateAccountInput {
  name: String!
  username: ID!
  password: String!
}

type LoginPayload {
  customer: Customer
  token: String!
}

type Pet {
  id: ID!
  name: String!
  weight: Float!
  category: PetType!
  photo: Photo!
  status: PetStatus!
  inCareOf: Customer
}

scalar Email
scalar Date

type Customer {
  email: Email!,
  username: ID!,
  name: String!,
  currentPets: [Pet!]!
  cateCreatd : Date,
  checkoutHistory: [Checkout!]!
}

type Photo {
  full: String
  thumb: String
}

enum PetType {
  DOG,
  CAT,
  BIRD,
  FISH,
  DRAGON
}

enum PetStatus {
  AVAILABLE
  CHECKED_OUT
}

type CheckoutPayload {
  customer: Customer!
  pet: Pet!
  checkoutDate: Date!
}

type Checkout {
  pet: Pet
  checkoutDate: Date!
  checkinDate: Date!
  late: Boolean
}